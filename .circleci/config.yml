---
x-defs:
  default_docker: &rust_docker [{image: "rustlang/rust:nightly"}]

version: 2
jobs:
  test:
    docker: *rust_docker
    steps:
      - checkout
      - restore_cache:
          keys:
            - ds-v1-docker--{{ arch }}-{{ checksum "Cargo.lock" }}
            - ds-v1-docker--{{ arch }}-
      - run: cargo fetch
      - run: cargo build
      - save_cache:
          key: ds-v1-docker--{{ arch }}-{{ checksum "Cargo.lock" }}
          paths:
            - "/usr/local/cargo"
            - "./target"
      - run: cargo test

  rustfmt:
    docker: *rust_docker
    steps:
      - checkout
      # No need for cache...
      - run: rustup component add rustfmt-preview --toolchain nightly
      - run: cargo fmt --all -- --check

  dev:
    docker: *rust_docker
    steps:
      - checkout
      - restore_cache:
          keys:
            - ds-v1-docker--{{ arch }}-{{ checksum "Cargo.lock" }}
            - ds-v1-docker--{{ arch }}-
      - run: cargo build --all

  release:
    docker: *rust_docker
    steps:
      - checkout
      - restore_cache:
          keys:
            - ds-v1-docker--{{ arch }}-{{ checksum "Cargo.lock" }}
            - ds-v1-docker--{{ arch }}-
      - run: cargo build --all --release

  image:
    docker: [{image: "docker:stable"}]
    environment:
      - IMAGE: frogpond/data-server
    steps:
      - setup_remote_docker
      - checkout
      - restore_cache:
          keys:
            - ds-v1-docker--{{ arch }}-image-{{ .Revision }}
            - ds-v1-docker--{{ arch }}-image
      - run:
          name: "Load from cache if present"
          command: test -r /tmp/image.tar && ( cat /tmp/image.tar | docker load ) || >&2 echo "No base image load"
      - run: docker build --target base --tag base .
      - run: docker build --target rust-build --tag rust-build .
      - run:
          name: "Build image"
          command: docker build -t "${IMAGE}:${CIRCLE_SHA1}" .
      - run: docker save base rust-build "${IMAGE}:${CIRCLE_SHA1}" > /tmp/image.tar
      - save_cache:
          key: ds-v1-docker--{{ arch }}-image-{{ .Revision }}
          paths:
            - /tmp/image.tar

  deploy-docker:
    docker: [{image: "docker:stable"}]
    environment:
      - IMAGE: frogpond/data-server
    steps:
      - setup_remote_docker
      - checkout
      - restore_cache:
          keys:
            - ds-v1-docker--{{ arch }}-image-{{ .Revision }}
            - ds-v1-docker--{{ arch }}-image
      - run: cat /tmp/image.tar | docker load
      - run: docker images -a -q

workflows:
  version: 2
  general:
    jobs:
      - rustfmt
      - test
      - dev:
          requires: [ rustfmt, test ]
      - release:
          requires: [ rustfmt, test ]
      - image:
          requires: [ rustfmt, test ]
      - hold-for-approval:
          type: approval
          requires: [ image ]
      - deploy-docker:
          requires: [ hold-for-approval ]

# TODO nightly after rust nightlies get published
# e.g. 4am
